{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from \"react\";\nimport { Map, TileLayer, Popup, Marker, withLeaflet } from \"react-leaflet\";\nimport \"./config\";\nimport Geocode from \"react-geocode\";\nimport { geocodeByAddress } from \"react-google-places-autocomplete\";\n\nconst MyMarker = props => {\n  const initMarker = ref => {\n    if (ref) {\n      ref.leafletElement.openPopup();\n    }\n  };\n\n  return __jsx(Marker, _extends({\n    ref: initMarker\n  }, props));\n};\n\nclass MapExample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPos: null,\n      key: 1,\n      address: \"\"\n    };\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {\n    setTimeout(() => this.myRef.current.leafletElement.invalidateSize(), 100);\n  }\n\n  handleClick(e) {\n    console.log(e.latlng.lat);\n    console.log(e.latlng.lng);\n    Geocode.setApiKey(\"AIzaSyDzzi_VBcf2Oef6LTViLU767UPNHlnIze4\");\n    Geocode.fromLatLng(e.latlng.lat, e.latlng.lng).then(response => {\n      const address = response.results[0].formatted_address;\n      console.log(address);\n      global.config.place.deliver.pickoff = address;\n      global.config.place.deliver.pickofflat = e.latlng.lat;\n      global.config.place.deliver.dropofflang = e.latlng.lng;\n      this.setState({\n        address: address\n      });\n    }, error => {\n      console.error(error);\n    });\n    this.setState({\n      currentPos: e.latlng\n    });\n  }\n\n  render() {\n    return __jsx(Map, {\n      ref: this.myRef,\n      className: \"map\",\n      center: this.props.center,\n      zoom: this.props.zoom,\n      onClick: this.handleClick\n    }, __jsx(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>, \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a> \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\n    }), this.state.currentPos && __jsx(MyMarker, {\n      position: this.state.currentPos\n    }, __jsx(Popup, {\n      position: this.state.currentPos\n    }, \"Current location: \", __jsx(\"pre\", null, this.state.address))));\n  }\n\n}\n\nexport default MapExample;","map":null,"metadata":{},"sourceType":"module"}