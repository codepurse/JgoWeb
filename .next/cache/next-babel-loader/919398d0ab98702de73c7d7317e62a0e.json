{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\deliver.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport \"../component/map/config\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nexport default function App() {\n  _s();\n\n  var _this = this;\n\n  function clickSubmit(e) {\n    e.preventDefault();\n    $(\".pTitle\").text(coordinates.lat);\n    global.config.place.deliver.pickoff = address;\n    global.config.place.deliver.dropoff = addressDrop;\n    global.config.place.deliver.pickofflat = coordinates.lat;\n    global.config.place.deliver.pickofflang = coordinates.lng;\n    global.config.place.deliver.dropofflat = coordinatesDrop.lat;\n    global.config.place.deliver.dropofflang = coordinatesDrop.lng;\n  }\n\n  var searchOptions = {\n    componentRestrictions: {\n      country: [\"ph\"]\n    }\n  };\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      address = _React$useState2[0],\n      setAddress = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      addressDrop = _React$useState4[0],\n      setAddressDrop = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    lat: null,\n    lng: null\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      coordinates = _React$useState6[0],\n      setCoordinates = _React$useState6[1];\n\n  var _React$useState7 = React.useState({\n    lat: null,\n    lng: null\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      coordinatesDrop = _React$useState8[0],\n      setCoordinatesDrop = _React$useState8[1];\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n      var results, latLng;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return geocodeByAddress(value);\n\n            case 2:\n              results = _context.sent;\n              _context.next = 5;\n              return getLatLng(results[0]);\n\n            case 5:\n              latLng = _context.sent;\n              setAddress(value);\n              setCoordinates(latLng);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSelect(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectDrop = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {\n      var results, latLng;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return geocodeByAddress(value);\n\n            case 2:\n              results = _context2.sent;\n              _context2.next = 5;\n              return getLatLng(results[0]);\n\n            case 5:\n              latLng = _context2.sent;\n              setAddressDrop(value);\n              setCoordinatesDrop(latLng);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSelectDrop(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"col-lg-6 colDeliver\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    className: \"pTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Book your delivery now!\"), __jsx(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    searchOptions: searchOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, function (_ref3) {\n    var getInputProps = _ref3.getInputProps,\n        suggestions = _ref3.suggestions,\n        getSuggestionItemProps = _ref3.getSuggestionItemProps,\n        loading = _ref3.loading;\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, __jsx(\"input\", _extends({\n      value: \"asdas\"\n    }, getInputProps({\n      className: \"location-search-input\"\n    }), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, loading && __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, \"Loading...\"), suggestions.map(function (suggestion) {\n      var className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n      var style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n        className: \"input-suggestion\",\n        style: style\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }), __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 23\n        }\n      }, suggestion.description));\n    })));\n  }), __jsx(PlacesAutocomplete, {\n    value: addressDrop,\n    onChange: setAddressDrop,\n    onSelect: handleSelectDrop,\n    searchOptions: searchOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, function (_ref4) {\n    var getInputProps = _ref4.getInputProps,\n        suggestions = _ref4.suggestions,\n        getSuggestionItemProps = _ref4.getSuggestionItemProps,\n        loading = _ref4.loading;\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, __jsx(\"input\", _extends({}, getInputProps({\n      placeholder: \"drop-off\",\n      className: \"location-search-input\"\n    }), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, loading && __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }, \"Loading...\"), suggestions.map(function (suggestion) {\n      var className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n      var style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n        className: \"input-suggestion\",\n        style: style\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      }), __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 23\n        }\n      }, suggestion.description));\n    })));\n  })), __jsx(\"input\", {\n    type: \"button\",\n    className: \"btnSubmit\",\n    value: \"SUBMIT\",\n    onClick: clickSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }));\n}\n\n_s(App, \"zFMC0KU8b8nr5BrKrDLxHvl4blc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/deliver.js"],"names":["React","Link","PlacesAutocomplete","geocodeByAddress","getLatLng","App","clickSubmit","e","preventDefault","$","text","coordinates","lat","global","config","place","deliver","pickoff","address","dropoff","addressDrop","pickofflat","pickofflang","lng","dropofflat","coordinatesDrop","dropofflang","searchOptions","componentRestrictions","country","useState","setAddress","setAddressDrop","setCoordinates","setCoordinatesDrop","handleSelect","value","results","latLng","handleSelectDrop","getInputProps","suggestions","getSuggestionItemProps","loading","className","map","suggestion","active","style","backgroundColor","cursor","description","placeholder"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport \"../component/map/config\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\n\r\nexport default function App() {\r\n  function clickSubmit(e) {\r\n\r\n    e.preventDefault();\r\n\r\n    $(\".pTitle\").text(coordinates.lat);\r\n    global.config.place.deliver.pickoff = address;\r\n    global.config.place.deliver.dropoff = addressDrop;\r\n\r\n    global.config.place.deliver.pickofflat = coordinates.lat;\r\n    global.config.place.deliver.pickofflang = coordinates.lng;\r\n\r\n    global.config.place.deliver.dropofflat = coordinatesDrop.lat; \r\n    global.config.place.deliver.dropofflang = coordinatesDrop.lng;\r\n  }\r\n\r\n  const searchOptions = {\r\n    componentRestrictions: { country: [\"ph\"] },\r\n  };\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [addressDrop, setAddressDrop] = React.useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n  const [coordinatesDrop, setCoordinatesDrop] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  const handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n   \r\n  };\r\n\r\n  const handleSelectDrop = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddressDrop(value);\r\n    setCoordinatesDrop(latLng);\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-lg-6 colDeliver\">\r\n      <p className=\"pTitle\">Book your delivery now!</p>\r\n      <div className=\"box\">\r\n        <PlacesAutocomplete\r\n          value={address}\r\n          onChange={setAddress}\r\n          onSelect={handleSelect}\r\n          searchOptions={searchOptions}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <div>\r\n              <input value = \"asdas\"\r\n                {...getInputProps({\r\n                  \r\n                  className: \"location-search-input\",\r\n                })}\r\n              />\r\n\r\n              <div className=\"autocomplete-dropdown-container\">\r\n                {loading && <div>Loading...</div>}\r\n                {suggestions.map((suggestion) => {\r\n                  const className = suggestion.active\r\n                    ? \"suggestion-item--active\"\r\n                    : \"suggestion-item\";\r\n                  // inline style for demonstration purpose\r\n                  const style = suggestion.active\r\n                    ? {\r\n                        backgroundColor: \"#fafafa\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                    : {\r\n                        backgroundColor: \"#ffffff\",\r\n                        cursor: \"pointer\",\r\n                      };\r\n                  return (\r\n                    <div\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className: \"input-suggestion\",\r\n                        style,\r\n                      })}\r\n                    >\r\n                      <span>{suggestion.description}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n        <PlacesAutocomplete\r\n          value={addressDrop}\r\n          onChange={setAddressDrop}\r\n          onSelect={handleSelectDrop}\r\n          searchOptions={searchOptions}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <div>\r\n              <input\r\n                {...getInputProps({\r\n                  placeholder: \"drop-off\",\r\n                  className: \"location-search-input\",\r\n                })}\r\n              />\r\n\r\n              <div className=\"autocomplete-dropdown-container\">\r\n                {loading && <div>Loading...</div>}\r\n                {suggestions.map((suggestion) => {\r\n                  const className = suggestion.active\r\n                    ? \"suggestion-item--active\"\r\n                    : \"suggestion-item\";\r\n                  // inline style for demonstration purpose\r\n                  const style = suggestion.active\r\n                    ? {\r\n                        backgroundColor: \"#fafafa\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                    : {\r\n                        backgroundColor: \"#ffffff\",\r\n                        cursor: \"pointer\",\r\n                      };\r\n                  return (\r\n                    <div\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className: \"input-suggestion\",\r\n                        style,\r\n                      })}\r\n                    >\r\n                      <span>{suggestion.description}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </div>\r\n     \r\n        <input\r\n          type=\"button\"\r\n          className=\"btnSubmit\"\r\n          value=\"SUBMIT\"\r\n          onClick={clickSubmit}\r\n        ></input>\r\n     \r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}