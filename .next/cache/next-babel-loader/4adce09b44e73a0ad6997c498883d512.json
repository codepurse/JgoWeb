{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\deliver.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from \"react\";\nimport Link from \"next/link\";\nimport \"../component/map/config\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nfunction clickSubmit() {\n  global.config.place.deliver.pickofflat = coordinates.lat;\n  global.config.place.deliver.pickofflang = coordinates.lng;\n  global.config.place.deliver.dropofflat = coordinatesDrop.lat;\n  global.config.place.deliver.dropofflang = coordinatesDrop.lng;\n}\n\nexport default function deliver() {\n  const searchOptions = {\n    componentRestrictions: {\n      country: [\"ph\"]\n    }\n  };\n  const [address, setAddress] = React.useState(\"\");\n  const [addressDrop, setAddressDrop] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  const [coordinatesDrop, setCoordinatesDrop] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng);\n  };\n\n  const handleSelectDrop = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddressDrop(value);\n    setCoordinatesDrop(latLng);\n  };\n\n  return __jsx(\"div\", {\n    className: \"col-lg-6 colDeliver\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    className: \"pTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Book your delivery now!\"), __jsx(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    searchOptions: searchOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", _extends({}, getInputProps({\n    placeholder: \"Pick-up Location\",\n    className: \"location-search-input\"\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, loading && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\"\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n      className: \"input-suggestion\",\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, suggestion.description));\n  })))), __jsx(PlacesAutocomplete, {\n    value: addressDrop,\n    onChange: setAddressDrop,\n    onSelect: handleSelectDrop,\n    searchOptions: searchOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", _extends({}, getInputProps({\n    placeholder: \"Drop-off location\",\n    className: \"location-search-input\"\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, loading && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 31\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\"\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n      className: \"input-suggestion\",\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 23\n      }\n    }), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }, suggestion.description));\n  }))))), __jsx(Link, {\n    href: \"/map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"button\",\n    className: \"btnSubmit\",\n    value: \"SUBMIT\",\n    onClick: clickSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/deliver.js"],"names":["React","Component","Link","PlacesAutocomplete","geocodeByAddress","getLatLng","clickSubmit","global","config","place","deliver","pickofflat","coordinates","lat","pickofflang","lng","dropofflat","coordinatesDrop","dropofflang","searchOptions","componentRestrictions","country","address","setAddress","useState","addressDrop","setAddressDrop","setCoordinates","setCoordinatesDrop","handleSelect","value","results","latLng","handleSelectDrop","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Link from \"next/link\";\r\nimport \"../component/map/config\"\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\n\r\nfunction clickSubmit() {\r\n\r\n\r\n  global.config.place.deliver.pickofflat = coordinates.lat;\r\n  global.config.place.deliver.pickofflang = coordinates.lng;\r\n\r\n  global.config.place.deliver.dropofflat = coordinatesDrop.lat;\r\n  global.config.place.deliver.dropofflang = coordinatesDrop.lng;\r\n}\r\n\r\nexport default function deliver() {\r\n\r\n  const searchOptions = {\r\n    componentRestrictions: { country: [\"ph\"] },\r\n  };\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [addressDrop, setAddressDrop] = React.useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n  const [coordinatesDrop, setCoordinatesDrop] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  const handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n  };\r\n\r\n  const handleSelectDrop = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddressDrop(value);\r\n    setCoordinatesDrop(latLng);\r\n  };\r\n\r\n  return (\r\n    \r\n      <div className=\"col-lg-6 colDeliver\">\r\n        <p className=\"pTitle\">Book your delivery now!</p>\r\n        <div className=\"box\">\r\n          <PlacesAutocomplete\r\n            value={address}\r\n            onChange={setAddress}\r\n            onSelect={handleSelect}\r\n            searchOptions={searchOptions}\r\n          >\r\n            {({\r\n              getInputProps,\r\n              suggestions,\r\n              getSuggestionItemProps,\r\n              loading,\r\n            }) => (\r\n              <div>\r\n                <input\r\n                  {...getInputProps({\r\n                    placeholder: \"Pick-up Location\",\r\n                    className: \"location-search-input\",\r\n                  })}\r\n                />\r\n\r\n                <div className=\"autocomplete-dropdown-container\">\r\n                  {loading && <div>Loading...</div>}\r\n                  {suggestions.map((suggestion) => {\r\n                    const className = suggestion.active\r\n                      ? \"suggestion-item--active\"\r\n                      : \"suggestion-item\";\r\n                    // inline style for demonstration purpose\r\n                    const style = suggestion.active\r\n                      ? {\r\n                          backgroundColor: \"#fafafa\",\r\n                          cursor: \"pointer\",\r\n                        }\r\n                      : {\r\n                          backgroundColor: \"#ffffff\",\r\n                          cursor: \"pointer\",\r\n                        };\r\n                    return (\r\n                      <div\r\n                        {...getSuggestionItemProps(suggestion, {\r\n                          className: \"input-suggestion\",\r\n                          style,\r\n                        })}\r\n                      >\r\n                        <span>{suggestion.description}</span>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n          <PlacesAutocomplete\r\n            value={addressDrop}\r\n            onChange={setAddressDrop}\r\n            onSelect={handleSelectDrop}\r\n            searchOptions={searchOptions}\r\n          >\r\n            {({\r\n              getInputProps,\r\n              suggestions,\r\n              getSuggestionItemProps,\r\n              loading,\r\n            }) => (\r\n              <div>\r\n                <input\r\n                  {...getInputProps({\r\n                    placeholder: \"Drop-off location\",\r\n                    className: \"location-search-input\",\r\n                  })}\r\n                />\r\n\r\n                <div className=\"autocomplete-dropdown-container\">\r\n                  {loading && <div>Loading...</div>}\r\n                  {suggestions.map((suggestion) => {\r\n                    const className = suggestion.active\r\n                      ? \"suggestion-item--active\"\r\n                      : \"suggestion-item\";\r\n                    // inline style for demonstration purpose\r\n                    const style = suggestion.active\r\n                      ? {\r\n                          backgroundColor: \"#fafafa\",\r\n                          cursor: \"pointer\",\r\n                        }\r\n                      : {\r\n                          backgroundColor: \"#ffffff\",\r\n                          cursor: \"pointer\",\r\n                        };\r\n                    return (\r\n                      <div\r\n                        {...getSuggestionItemProps(suggestion, {\r\n                          className: \"input-suggestion\",\r\n                          style,\r\n                        })}\r\n                      >\r\n                        <span>{suggestion.description}</span>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n        </div>\r\n        <Link href=\"/map\">\r\n          <input\r\n            type=\"button\"\r\n            className=\"btnSubmit\"\r\n            value=\"SUBMIT\"\r\n            onClick={clickSubmit()}\r\n          ></input>\r\n        </Link>\r\n      </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}