{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\map\\\\googlemap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, DirectionsRenderer } from \"react-google-maps\";\nimport \"./config\";\n\nfunction MapDirectionsRenderer(props) {\n  const {\n    0: directions,\n    1: setDirections\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    const {\n      places,\n      travelMode\n    } = props;\n    const waypoints = places.map(p => ({\n      location: {\n        lat: p.lat,\n        lng: p.lng\n      },\n      stopover: true\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        setDirections(result);\n      } else if (status === \"OVER_QUERY_LIMIT\") {\n        setTimeout(() => this.setState({\n          position: 1\n        }), 3000);\n      }\n    });\n  });\n\n  if (error) {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, error);\n  }\n\n  return directions && __jsx(DirectionsRenderer, {\n    directions: directions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 24\n    }\n  });\n}\n\nconst Map = withScriptjs(withGoogleMap(props => __jsx(GoogleMap, {\n  defaultCenter: props.defaultCenter,\n  defaultZoom: props.defaultZoom,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }\n}, props.markers.map((marker, index) => {\n  const position = {\n    lat: marker.lat,\n    lng: marker.lng\n  };\n  return __jsx(Marker, {\n    key: index,\n    position: position,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }\n  });\n}), __jsx(MapDirectionsRenderer, {\n  places: props.markers,\n  travelMode: google.maps.TravelMode.DRIVING,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }\n}))));\nexport default Map;","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/map/googlemap.js"],"names":["React","useState","useEffect","withGoogleMap","GoogleMap","withScriptjs","Marker","DirectionsRenderer","MapDirectionsRenderer","props","directions","setDirections","error","setError","places","travelMode","waypoints","map","p","location","lat","lng","stopover","origin","shift","destination","pop","directionsService","google","maps","DirectionsService","route","result","status","DirectionsStatus","OK","setTimeout","setState","position","Map","defaultCenter","defaultZoom","markers","marker","index","TravelMode","DRIVING"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  withScriptjs,\r\n  Marker,\r\n  DirectionsRenderer,\r\n} from \"react-google-maps\";\r\nimport \"./config\";\r\n\r\nfunction MapDirectionsRenderer(props) {\r\n  const [directions, setDirections] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { places, travelMode } = props;\r\n\r\n    const waypoints = places.map((p) => ({\r\n      location: { lat: p.lat, lng: p.lng },\r\n      stopover: true,\r\n    }));\r\n    const origin = waypoints.shift().location;\r\n    const destination = waypoints.pop().location;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        travelMode: travelMode,\r\n        waypoints: waypoints,\r\n      },\r\n      (result, status) => {\r\n        if (status === google.maps.DirectionsStatus.OK) {\r\n          setDirections(result);\r\n        } else if (status === \"OVER_QUERY_LIMIT\") {\r\n          setTimeout(() => this.setState({ position: 1 }), 3000);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n  return directions && <DirectionsRenderer directions={directions} />;\r\n}\r\n\r\nconst Map = withScriptjs(\r\n  withGoogleMap((props) => (\r\n    <GoogleMap\r\n      defaultCenter={props.defaultCenter}\r\n      defaultZoom={props.defaultZoom}\r\n    >\r\n      {props.markers.map((marker, index) => {\r\n        const position = { lat: marker.lat, lng: marker.lng };\r\n        return <Marker key={index} position={position} />;\r\n      })}\r\n      <MapDirectionsRenderer\r\n        places={props.markers}\r\n        travelMode={google.maps.TravelMode.DRIVING}\r\n      />\r\n    </GoogleMap>\r\n  ))\r\n);\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}