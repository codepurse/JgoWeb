{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\map\\\\googlemap.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* global google */\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, DirectionsRenderer } from \"react-google-maps\";\n\nclass MapDirectionsRenderer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      directions: null,\n      error: null\n    });\n  }\n\n  componentDidMount() {\n    try {\n      const {\n        places,\n        travelMode\n      } = this.props;\n      const waypoints = places.map(p => ({\n        location: {\n          lat: p.lat,\n          lng: p.lng\n        },\n        stopover: true\n      }));\n      const origin = waypoints.shift().location;\n      const destination = waypoints.pop().location;\n      const directionsService = new google.maps.DirectionsService();\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          this.setState({\n            error: result\n          });\n        }\n      });\n    } catch (err) {\n      console.log(\"error\");\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 14\n        }\n      }, this.state.error);\n    }\n\n    return this.state.directions && __jsx(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nconst Map = withScriptjs(withGoogleMap(props => __jsx(GoogleMap, {\n  defaultCenter: props.defaultCenter,\n  defaultZoom: props.defaultZoom,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }\n}, props.markers.map((marker, index) => {\n  const position = {\n    lat: marker.lat,\n    lng: marker.lng\n  };\n  return __jsx(Marker, {\n    key: index,\n    position: position,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }\n  });\n}), __jsx(MapDirectionsRenderer, {\n  places: props.markers,\n  travelMode: google.maps.TravelMode.DRIVING,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }\n}))));\nexport default Map;","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/map/googlemap.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","Marker","DirectionsRenderer","MapDirectionsRenderer","Component","directions","error","componentDidMount","places","travelMode","props","waypoints","map","p","location","lat","lng","stopover","origin","shift","destination","pop","directionsService","google","maps","DirectionsService","route","result","status","DirectionsStatus","OK","setState","err","console","log","render","state","Map","defaultCenter","defaultZoom","markers","marker","index","position","TravelMode","DRIVING"],"mappings":"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","sourcesContent":["/* global google */\r\nimport React from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  withScriptjs,\r\n  Marker,\r\n  DirectionsRenderer,\r\n} from \"react-google-maps\";\r\n\r\nclass MapDirectionsRenderer extends React.Component {\r\n  state = {\r\n    directions: null,\r\n    error: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      const { places, travelMode } = this.props;\r\n\r\n      const waypoints = places.map((p) => ({\r\n        location: { lat: p.lat, lng: p.lng },\r\n        stopover: true,\r\n      }));\r\n      const origin = waypoints.shift().location;\r\n      const destination = waypoints.pop().location;\r\n\r\n      const directionsService = new google.maps.DirectionsService();\r\n      directionsService.route(\r\n        {\r\n          origin: origin,\r\n          destination: destination,\r\n          travelMode: travelMode,\r\n          waypoints: waypoints,\r\n        },\r\n        (result, status) => {\r\n          if (status === google.maps.DirectionsStatus.OK) {\r\n            this.setState({\r\n              directions: result,\r\n            });\r\n          } else {\r\n            this.setState({ error: result });\r\n          }\r\n        }\r\n      );\r\n    } catch(err) {\r\n      console.log(\"error\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <h1>{this.state.error}</h1>;\r\n    }\r\n    return (\r\n      this.state.directions && (\r\n        <DirectionsRenderer directions={this.state.directions} />\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nconst Map = withScriptjs(\r\n  withGoogleMap((props) => (\r\n    <GoogleMap\r\n      defaultCenter={props.defaultCenter}\r\n      defaultZoom={props.defaultZoom}\r\n    >\r\n      {props.markers.map((marker, index) => {\r\n        const position = { lat: marker.lat, lng: marker.lng };\r\n        return <Marker key={index} position={position} />;\r\n      })}\r\n      <MapDirectionsRenderer\r\n        places={props.markers}\r\n        travelMode={google.maps.TravelMode.DRIVING}\r\n      />\r\n    </GoogleMap>\r\n  ))\r\n);\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}