{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\map\\\\googlemap.js\";\nvar __jsx = React.createElement;\n\n/* global google */\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, Marker, withScriptjs } from \"react-google-maps\";\n\nconst Markers = ({\n  places\n}) => {\n  return places.map(place => {\n    return __jsx(Marker, {\n      key: place.id,\n      position: {\n        lat: place.lat,\n        lng: place.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    });\n  });\n};\n\nconst Map = ({\n  places,\n  zoom,\n  center\n}) => {\n  return __jsx(GoogleMap, {\n    defaultZoom: zoom,\n    defaultCenter: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(Markers, {\n    places: places,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst getRandomInRange = (from, to, fixed) => {\n  return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\n};\n\nclass MapWithMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: this.props.places\n    }; //initialize initial state from props\n  }\n\n  addPlace() {\n    const newPlace = {\n      id: this.state.places.length + 1,\n      lat: getRandomInRange(-30.0, -35.0, 3),\n      lng: getRandomInRange(110.0, 150.0, 3)\n    };\n    this.setState(prevState => ({\n      places: [...prevState.places, newPlace]\n    }));\n    /*if(this.state.places.length > 10) { \r\n      clearInterval(this.intervalId)\r\n    }*/\n  }\n\n  render() {\n    return __jsx(Map, {\n      center: this.props.center,\n      zoom: this.props.zoom,\n      places: this.state.places,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default withScriptjs(withGoogleMap(MapWithMarker));","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/map/googlemap.js"],"names":["React","withGoogleMap","GoogleMap","Marker","withScriptjs","Markers","places","map","place","id","lat","lng","Map","zoom","center","getRandomInRange","from","to","fixed","Math","random","toFixed","MapWithMarker","Component","constructor","props","state","addPlace","newPlace","length","setState","prevState","render"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,YAJF,QAKO,mBALP;;AAOA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC9B,SAAOA,MAAM,CAACC,GAAP,CAAWC,KAAK,IAAI;AACzB,WACE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAK,CAACC,EAAnB;AAAuB,MAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEF,KAAK,CAACE,GAAb;AAAkBC,QAAAA,GAAG,EAAEH,KAAK,CAACG;AAA7B,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJM,CAAP;AAKD,CAND;;AAQA,MAAMC,GAAG,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUO,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAD,KAA8B;AACxC,SACE,MAAC,SAAD;AAAW,IAAA,WAAW,EAAED,IAAxB;AAA8B,IAAA,aAAa,EAAEC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,MAAM,EAAER,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQA,MAAMS,gBAAgB,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,KAAX,KAAqB;AAC5C,SAAO,CAACC,IAAI,CAACC,MAAL,MAAiBH,EAAE,GAAGD,IAAtB,IAA8BA,IAA/B,EAAqCK,OAArC,CAA6CH,KAA7C,IAAsD,CAA7D;AACD,CAFD;;AAIA,MAAMI,aAAN,SAA4BtB,KAAK,CAACuB,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEpB,MAAAA,MAAM,EAAE,KAAKmB,KAAL,CAAWnB;AAArB,KAAb,CAFiB,CAE2B;AAC7C;;AAEDqB,EAAAA,QAAQ,GAAG;AACT,UAAMC,QAAQ,GAAG;AACfnB,MAAAA,EAAE,EAAE,KAAKiB,KAAL,CAAWpB,MAAX,CAAkBuB,MAAlB,GAA2B,CADhB;AAEfnB,MAAAA,GAAG,EAAEK,gBAAgB,CAAC,CAAC,IAAF,EAAQ,CAAC,IAAT,EAAe,CAAf,CAFN;AAGfJ,MAAAA,GAAG,EAAEI,gBAAgB,CAAC,KAAD,EAAQ,KAAR,EAAe,CAAf;AAHN,KAAjB;AAKA,SAAKe,QAAL,CAAcC,SAAS,KAAK;AAC1BzB,MAAAA,MAAM,EAAE,CAAC,GAAGyB,SAAS,CAACzB,MAAd,EAAsBsB,QAAtB;AADkB,KAAL,CAAvB;AAIA;;;AAGD;;AAGDI,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKP,KAAL,CAAWX,MADrB;AAEE,MAAA,IAAI,EAAE,KAAKW,KAAL,CAAWZ,IAFnB;AAGE,MAAA,MAAM,EAAE,KAAKa,KAAL,CAAWpB,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AA9ByC;;AAiC5C,eAAeF,YAAY,CAACH,aAAa,CAACqB,aAAD,CAAd,CAA3B","sourcesContent":["/* global google */\r\nimport React from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  withScriptjs\r\n} from \"react-google-maps\";\r\n\r\nconst Markers = ({ places }) => {\r\n  return places.map(place => {\r\n    return (\r\n      <Marker key={place.id} position={{ lat: place.lat, lng: place.lng }} />\r\n    );\r\n  });\r\n};\r\n\r\nconst Map = ({ places, zoom, center }) => {\r\n  return (\r\n    <GoogleMap defaultZoom={zoom} defaultCenter={center}>\r\n      <Markers places={places} />\r\n    </GoogleMap>\r\n  );\r\n};\r\n\r\nconst getRandomInRange = (from, to, fixed) => {\r\n  return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\r\n};\r\n\r\nclass MapWithMarker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { places: this.props.places }; //initialize initial state from props\r\n  }\r\n\r\n  addPlace() {\r\n    const newPlace = {\r\n      id: this.state.places.length + 1,\r\n      lat: getRandomInRange(-30.0, -35.0, 3),\r\n      lng: getRandomInRange(110.0, 150.0, 3)\r\n    };\r\n    this.setState(prevState => ({\r\n      places: [...prevState.places, newPlace]\r\n    }));\r\n\r\n    /*if(this.state.places.length > 10) { \r\n      clearInterval(this.intervalId)\r\n    }*/\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <Map\r\n        center={this.props.center}\r\n        zoom={this.props.zoom}\r\n        places={this.state.places}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withScriptjs(withGoogleMap(MapWithMarker));\r\n"]},"metadata":{},"sourceType":"module"}