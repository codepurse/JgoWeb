{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component, useState } from \"react\";\nimport \"../component/map/config\";\nimport GooglePlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-google-places-autocomplete\";\nimport Custommap from \"../component/custommap\";\nimport swal from \"@sweetalert/with-react\";\nimport { useRouter } from \"next/router\";\nexport default function App() {\n  const router = useRouter();\n  var click;\n\n  function getAdd() {\n    if (global.config.place.deliver.pickoff.includes(\"Metro Manila\") === true) {\n      if (click === 0) {\n        coordinates.lat = global.config.place.deliver.pickofflat;\n        coordinates.lng = global.config.place.deliver.dropofflang;\n        setAddress({\n          value: global.config.place.deliver.pickoff,\n          label: global.config.place.deliver.pickoff\n        });\n      } else {\n        setAddressDrop({\n          value: global.config.place.deliver.pickoff,\n          label: global.config.place.deliver.pickoff\n        });\n        coordinatesDrop.lat = global.config.place.deliver.pickofflat;\n        coordinatesDrop.lng = global.config.place.deliver.dropofflang;\n      }\n\n      swal.close();\n    } else {\n      swal(__jsx(\"div\", {\n        style: {\n          width: \"450px\",\n          padding: \"10px\"\n        }\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"row align-items-center\",\n        style: {\n          borderLeft: \"3px solid #FFE900\"\n        }\n      }, __jsx(\"div\", {\n        className: \"col-lg-2\"\n      }, __jsx(\"img\", {\n        src: \"Image/complain.png\",\n        style: {\n          width: \"32px\"\n        }\n      })), __jsx(\"div\", {\n        className: \"col-lg-10\",\n        style: {\n          textAlign: \"left\"\n        }\n      }, __jsx(\"p\", {\n        className: \"pError\"\n      }, \"Warning\"), __jsx(\"p\", {\n        className: \"pErrorSub\"\n      }, \"The entered address is not yet in our service area.\"))))));\n    }\n  }\n\n  function clickSubmit(e) {\n    if (address === \"\" || addressDrop === \"\") {\n      swal(__jsx(\"div\", {\n        style: {\n          width: \"450px\",\n          padding: \"10px\"\n        }\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"row align-items-center\",\n        style: {\n          borderLeft: \"3px solid #c62828\"\n        }\n      }, __jsx(\"div\", {\n        className: \"col-lg-2\"\n      }, __jsx(\"img\", {\n        src: \"Image/warning.png\",\n        style: {\n          width: \"32px\"\n        }\n      })), __jsx(\"div\", {\n        className: \"col-lg-10\",\n        style: {\n          textAlign: \"left\"\n        }\n      }, __jsx(\"p\", {\n        className: \"pError\"\n      }, \"Error\"), __jsx(\"p\", {\n        className: \"pErrorSub\"\n      }, \"Please enter a valid address in both textbox\", \" \"))))));\n    } else {\n      const origin = {\n        lat: coordinates.lat,\n        lng: coordinates.lng,\n        id: \"1\"\n      };\n      coordinate.push(origin);\n      const destination = {\n        lat: coordinatesDrop.lat,\n        lng: coordinatesDrop.lng,\n        id: \"2\"\n      };\n      coordinate.push(destination);\n      console.log(coordinate);\n      localStorage.setItem(\"address\", address.label);\n      localStorage.setItem(\"addressDrop\", addressDrop.label);\n      localStorage.setItem(\"pickofflat\", coordinates.lat);\n      localStorage.setItem(\"pickofflng\", coordinates.lng);\n      localStorage.setItem(\"dropofflat\", coordinatesDrop.lat);\n      localStorage.setItem(\"dropofflng\", coordinatesDrop.lng);\n      global.config.place.deliver.pickoff = address.label;\n      global.config.place.deliver.dropoff = addressDrop.label;\n      global.config.place.deliver.pickofflat = coordinatesDrop.lat;\n      global.config.place.deliver.pickofflang = coordinatesDrop.lng;\n      global.config.place.deliver.dropofflat = coordinatesDrop.lat;\n      global.config.place.deliver.dropofflang = coordinatesDrop.lng;\n      global.config.place.deliver.refresh = 1;\n      router.push(\"/map\");\n    }\n  }\n\n  const [address, setAddress] = React.useState(\"\");\n  const [addressDrop, setAddressDrop] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  const [coordinatesDrop, setCoordinatesDrop] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleChange = async value => {\n    const results = await geocodeByAddress(value.label);\n    const latLng = await getLatLng(results[0]);\n    var str = value.label;\n    var n = str.includes(\"Metro Manila\");\n\n    if (n === true) {\n      setAddress(value);\n      setCoordinates(latLng);\n    } else {\n      swal(__jsx(\"div\", {\n        style: {\n          width: \"450px\",\n          padding: \"10px\"\n        }\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"row align-items-center\",\n        style: {\n          borderLeft: \"3px solid #FFE900\"\n        }\n      }, __jsx(\"div\", {\n        className: \"col-lg-2\"\n      }, __jsx(\"img\", {\n        src: \"Image/complain.png\",\n        style: {\n          width: \"32px\"\n        }\n      })), __jsx(\"div\", {\n        className: \"col-lg-10\",\n        style: {\n          textAlign: \"left\"\n        }\n      }, __jsx(\"p\", {\n        className: \"pError\"\n      }, \"Warning\"), __jsx(\"p\", {\n        className: \"pErrorSub\"\n      }, \"The entered address is not yet in our service area.\"))))));\n    }\n  };\n\n  const handleChangeDrop = async value => {\n    const results = await geocodeByAddress(value.label);\n    const latLng = await getLatLng(results[0]);\n    var str = value.label;\n    var n = str.includes(\"Metro Manila\");\n    setAddressDrop(value);\n    setCoordinatesDrop(latLng);\n\n    if (n === true) {\n      alert(\"asdas\");\n    }\n  };\n\n  function opensweetalert() {\n    swal(__jsx(\"div\", {\n      style: {\n        borderRadius: \"10px\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        width: \"800px\"\n      }\n    }, __jsx(\"p\", {\n      className: \"pDrag\"\n    }, \"Drag the marker to set location\"), __jsx(\"button\", {\n      className: \"btnDone\",\n      onClick: getAdd\n    }, \"Done\"), __jsx(Custommap, null)));\n  }\n\n  return __jsx(\"div\", {\n    className: \"col-lg-6 colDeliver\"\n  }, __jsx(\"p\", {\n    className: \"pTitle\"\n  }, \"Book your delivery now!\"), __jsx(\"div\", {\n    className: \"box\"\n  }, __jsx(\"div\", {\n    className: \"form-inline\",\n    onClick: () => click = 0\n  }, __jsx(GooglePlacesAutocomplete, {\n    selectProps: {\n      value: address,\n      instanceId: \"1\",\n      onChange: handleChange\n    },\n    autocompletionRequest: {\n      componentRestrictions: {\n        country: [\"ph\"]\n      }\n    }\n  }), __jsx(\"img\", {\n    src: \"Image/google-maps.png\",\n    className: \"img-fluid imgMap\",\n    onClick: opensweetalert\n  })), __jsx(\"div\", {\n    className: \"form-inline\",\n    onClick: () => click = 1,\n    style: {\n      marginTop: \"10px\"\n    }\n  }, __jsx(GooglePlacesAutocomplete, {\n    selectProps: {\n      instanceId: \"2\",\n      value: addressDrop,\n      onChange: handleChangeDrop\n    },\n    autocompletionRequest: {\n      componentRestrictions: {\n        country: [\"ph\"]\n      }\n    }\n  }), __jsx(\"img\", {\n    src: \"Image/google-maps.png\",\n    className: \"img-fluid imgMap\",\n    onClick: opensweetalert\n  }))), __jsx(\"input\", {\n    type: \"button\",\n    className: \"btnSubmit\",\n    value: \"SUBMIT\",\n    onClick: clickSubmit\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}