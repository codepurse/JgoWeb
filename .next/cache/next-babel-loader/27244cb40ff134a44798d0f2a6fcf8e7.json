{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component, useState } from \"react\";\nimport Link from \"next/link\";\nimport \"../component/map/config\";\nimport GooglePlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-google-places-autocomplete\";\nimport Custommap from \"../component/custommap\";\nimport swal from \"@sweetalert/with-react\";\nexport default function App() {\n  var click;\n\n  function getAdd() {\n    if (click === 0) {\n      coordinates.lat = global.config.place.deliver.pickofflat;\n      coordinates.lng = global.config.place.deliver.dropofflang;\n      setAddress({\n        value: global.config.place.deliver.pickoff,\n        label: global.config.place.deliver.pickoff\n      });\n    } else {\n      setAddressDrop({\n        value: global.config.place.deliver.pickoff,\n        label: global.config.place.deliver.pickoff\n      });\n      coordinatesDrop.lat = global.config.place.deliver.pickofflat;\n      coordinatesDrop.lng = global.config.place.deliver.dropofflang;\n    }\n\n    swal.close();\n  }\n\n  function clickSubmit(e) {\n    const origin = {\n      lat: coordinates.lat,\n      lng: coordinates.lng,\n      id: \"1\"\n    };\n    coordinate.push(origin);\n    const destination = {\n      lat: coordinatesDrop.lat,\n      lng: coordinatesDrop.lng,\n      id: \"2\"\n    };\n    coordinate.push(destination);\n    console.log(coordinate);\n    localStorage.setItem(\"address\", address.label);\n    localStorage.setItem(\"addressDrop\", addressDrop.label);\n    localStorage.setItem(\"pickofflat\", coordinates.lat);\n    localStorage.setItem(\"pickofflng\", coordinates.lng);\n    localStorage.setItem(\"dropofflat\", coordinatesDrop.lat);\n    localStorage.setItem(\"dropofflng\", coordinatesDrop.lng);\n    global.config.place.deliver.pickoff = address.label;\n    global.config.place.deliver.dropoff = addressDrop.label;\n    global.config.place.deliver.pickofflat = coordinatesDrop.lat;\n    global.config.place.deliver.pickofflang = coordinatesDrop.lng;\n    global.config.place.deliver.dropofflat = coordinatesDrop.lat;\n    global.config.place.deliver.dropofflang = coordinatesDrop.lng;\n    global.config.place.deliver.refresh = 1;\n  }\n\n  const [address, setAddress] = React.useState(\"\");\n  const [addressDrop, setAddressDrop] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n  const [coordinatesDrop, setCoordinatesDrop] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleChange = async value => {\n    const results = await geocodeByAddress(value.label);\n    const latLng = await getLatLng(results[0]);\n    console.log(value);\n    setAddress(value);\n    setCoordinates(latLng);\n  };\n\n  const handleChangeDrop = async value => {\n    const results = await geocodeByAddress(value.label);\n    const latLng = await getLatLng(results[0]);\n    setAddressDrop(value);\n    setCoordinatesDrop(latLng);\n  };\n\n  function opensweetalert() {\n    swal(__jsx(\"div\", {\n      style: {\n        borderRadius: \"10px\",\n        overflow: \"hidden\",\n        position: \"relative\"\n      }\n    }, __jsx(\"p\", {\n      className: \"pDrag\"\n    }, \"Drag the marker to set location\"), __jsx(\"button\", {\n      className: \"btnDone\",\n      onClick: getAdd\n    }, \"Done\"), __jsx(Custommap, null)));\n  }\n\n  return __jsx(\"div\", {\n    className: \"col-lg-6 colDeliver\"\n  }, __jsx(\"p\", {\n    className: \"pTitle\"\n  }, \"Book your delivery now!\"), __jsx(\"div\", {\n    className: \"box\"\n  }, __jsx(\"div\", {\n    className: \"form-inline\",\n    onClick: () => click = 0\n  }, __jsx(\"img\", {\n    src: \"Image/maps.png\",\n    className: \"img-fluid\",\n    onClick: opensweetalert\n  }), __jsx(GooglePlacesAutocomplete, {\n    selectProps: {\n      value: address,\n      instanceId: \"1\",\n      onChange: handleChange\n    },\n    autocompletionRequest: {\n      componentRestrictions: {\n        country: [\"ph\"]\n      }\n    }\n  })), __jsx(\"div\", {\n    className: \"form-inline\",\n    onClick: () => click = 1\n  }, __jsx(\"img\", {\n    src: \"Image/maps.png\",\n    className: \"img-fluid\",\n    onClick: opensweetalert\n  }), __jsx(GooglePlacesAutocomplete, {\n    selectProps: {\n      instanceId: \"2\",\n      value: addressDrop,\n      onChange: handleChangeDrop\n    },\n    autocompletionRequest: {\n      componentRestrictions: {\n        country: [\"ph\"]\n      }\n    }\n  }))), __jsx(Link, {\n    href: \"/map\"\n  }, __jsx(\"input\", {\n    type: \"button\",\n    className: \"btnSubmit\",\n    value: \"SUBMIT\",\n    onClick: clickSubmit\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}