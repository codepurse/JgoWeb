{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\pages\\\\custommap.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\nexport class MainMap extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"addMarker\", (location, map) => {\n      this.setState(prev => ({\n        fields: _objectSpread(_objectSpread({}, prev.fields), {}, {\n          location\n        })\n      }));\n      map.panTo(location);\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      lat,\n      lng\n    } = await this.getcurrentLocation();\n    this.setState(prev => ({\n      fields: _objectSpread(_objectSpread({}, prev.fields), {}, {\n        location: {\n          lat,\n          lng\n        }\n      }),\n      currentLocation: {\n        lat,\n        lng\n      }\n    }));\n  }\n\n  getcurrentLocation() {\n    if (navigator && navigator.geolocation) {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          resolve({\n            lat: coords.latitude,\n            lng: coords.longitude\n          });\n        });\n      });\n    }\n\n    return {\n      lat: 0,\n      lng: 0\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, __jsx(Map, {\n      google: this.props.google,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      initialCenter: this.state.fields.location,\n      center: this.state.fields.location,\n      zoom: 14,\n      onClick: (t, map, c) => this.addMarker(c.latLng, map),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, __jsx(Marker, {\n      position: this.state.fields.location,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDzzi_VBcf2Oef6LTViLU767UPNHlnIze4\"\n})(MainMap);","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/pages/custommap.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","MainMap","location","map","setState","prev","fields","panTo","componentDidMount","lat","lng","getcurrentLocation","currentLocation","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","pos","coords","latitude","longitude","render","props","google","width","height","state","t","c","addMarker","latLng","apiKey"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,gBAAlC,QAA0D,mBAA1D;AAEA,OAAO,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;;AAAA,uCAmCzB,CAACM,QAAD,EAAWC,GAAX,KAAmB;AAC7B,WAAKC,QAAL,CAAeC,IAAD,KAAW;AACvBC,QAAAA,MAAM,kCACDD,IAAI,CAACC,MADJ;AAEJJ,UAAAA;AAFI;AADiB,OAAX,CAAd;AAMAC,MAAAA,GAAG,CAACI,KAAJ,CAAUL,QAAV;AACD,KA3CoC;AAAA;;AACrC,QAAMM,iBAAN,GAA0B;AACxB,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAe,MAAM,KAAKC,kBAAL,EAA3B;AACA,SAAKP,QAAL,CAAeC,IAAD,KAAW;AACvBC,MAAAA,MAAM,kCACDD,IAAI,CAACC,MADJ;AAEJJ,QAAAA,QAAQ,EAAE;AACRO,UAAAA,GADQ;AAERC,UAAAA;AAFQ;AAFN,QADiB;AAQvBE,MAAAA,eAAe,EAAE;AACfH,QAAAA,GADe;AAEfC,QAAAA;AAFe;AARM,KAAX,CAAd;AAaD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,QAAIE,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACtC,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,QAAAA,SAAS,CAACC,WAAV,CAAsBI,kBAAtB,CAA0CC,GAAD,IAAS;AAChD,gBAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AACAJ,UAAAA,OAAO,CAAC;AACNP,YAAAA,GAAG,EAAEW,MAAM,CAACC,QADN;AAENX,YAAAA,GAAG,EAAEU,MAAM,CAACE;AAFN,WAAD,CAAP;AAID,SAND;AAOD,OARM,CAAP;AASD;;AACD,WAAO;AACLb,MAAAA,GAAG,EAAE,CADA;AAELC,MAAAA,GAAG,EAAE;AAFA,KAAP;AAID;;AAWDa,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MADrB;AAEE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OAFT;AAME,MAAA,aAAa,EAAE,KAAKC,KAAL,CAAWtB,MAAX,CAAkBJ,QANnC;AAOE,MAAA,MAAM,EAAE,KAAK0B,KAAL,CAAWtB,MAAX,CAAkBJ,QAP5B;AAQE,MAAA,IAAI,EAAE,EARR;AASE,MAAA,OAAO,EAAE,CAAC2B,CAAD,EAAI1B,GAAJ,EAAS2B,CAAT,KAAe,KAAKC,SAAL,CAAeD,CAAC,CAACE,MAAjB,EAAyB7B,GAAzB,CAT1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,KAAKyB,KAAL,CAAWtB,MAAX,CAAkBJ,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF,CADF;AAiBD;;AA/DoC;AAkEvC,eAAeF,gBAAgB,CAAC;AAC9BiC,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZhC,OAFY,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nexport class MainMap extends Component {\r\n  async componentDidMount() {\r\n    const { lat, lng } = await this.getcurrentLocation();\r\n    this.setState((prev) => ({\r\n      fields: {\r\n        ...prev.fields,\r\n        location: {\r\n          lat,\r\n          lng,\r\n        },\r\n      },\r\n      currentLocation: {\r\n        lat,\r\n        lng,\r\n      },\r\n    }));\r\n  }\r\n\r\n  getcurrentLocation() {\r\n    if (navigator && navigator.geolocation) {\r\n      return new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition((pos) => {\r\n          const coords = pos.coords;\r\n          resolve({\r\n            lat: coords.latitude,\r\n            lng: coords.longitude,\r\n          });\r\n        });\r\n      });\r\n    }\r\n    return {\r\n      lat: 0,\r\n      lng: 0,\r\n    };\r\n  }\r\n  addMarker = (location, map) => {\r\n    this.setState((prev) => ({\r\n      fields: {\r\n        ...prev.fields,\r\n        location,\r\n      },\r\n    }));\r\n    map.panTo(location);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map\r\n          google={this.props.google}\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n          initialCenter={this.state.fields.location}\r\n          center={this.state.fields.location}\r\n          zoom={14}\r\n          onClick={(t, map, c) => this.addMarker(c.latLng, map)}\r\n        >\r\n          <Marker position={this.state.fields.location} />\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyDzzi_VBcf2Oef6LTViLU767UPNHlnIze4\",\r\n})(MainMap);\r\n"]},"metadata":{},"sourceType":"module"}