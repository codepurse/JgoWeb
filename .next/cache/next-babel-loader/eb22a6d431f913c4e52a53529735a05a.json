{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfon\\\\Documents\\\\Work Projects\\\\Bitbucket\\\\Jgo\\\\component\\\\map\\\\googlemap.js\";\nvar __jsx = React.createElement;\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { Polyline } from \"react-google-maps\";\nimport { withGoogleMap, withScriptjs, GoogleMap, DirectionsRenderer } from \"react-google-maps\";\n\nconst Markers = ({\n  places\n}) => {\n  return places.map(place => {\n    return __jsx(Marker, {\n      key: place.id,\n      position: {\n        lat: place.lat,\n        lng: place.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    });\n  });\n};\n\nconst Map = ({\n  places,\n  zoom,\n  center\n}) => {\n  return __jsx(GoogleMap, {\n    defaultZoom: zoom,\n    defaultCenter: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(Markers, {\n    places: places,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }));\n};\n\nclass MapWithMarker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: this.props.places\n    }; //initialize initial state from props\n  }\n\n  addPlace() {\n    const newPlace = {\n      id: this.state.places.length + 1,\n      lat: getRandomInRange(-30.0, -35.0, 3),\n      lng: getRandomInRange(110.0, 150.0, 3)\n    };\n    this.setState(prevState => ({\n      places: [...prevState.places, newPlace]\n    }));\n    /*if(this.state.places.length > 10) { \r\n      clearInterval(this.intervalId)\r\n    }*/\n  }\n\n  render() {\n    return __jsx(Map, {\n      center: this.props.center,\n      zoom: this.props.zoom,\n      places: this.state.places,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default MapWithMarker;","map":{"version":3,"sources":["C:/Users/Alfon/Documents/Work Projects/Bitbucket/Jgo/component/map/googlemap.js"],"names":["React","Component","Polyline","withGoogleMap","withScriptjs","GoogleMap","DirectionsRenderer","Markers","places","map","place","id","lat","lng","Map","zoom","center","MapWithMarker","constructor","props","state","addPlace","newPlace","length","getRandomInRange","setState","prevState","render"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,kBAJF,QAKO,mBALP;;AAOA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC9B,SAAOA,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAW;AAC3B,WACE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAK,CAACC,EAAnB;AAAuB,MAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEF,KAAK,CAACE,GAAb;AAAkBC,QAAAA,GAAG,EAAEH,KAAK,CAACG;AAA7B,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJM,CAAP;AAKD,CAND;;AAQA,MAAMC,GAAG,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUO,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAD,KAA8B;AACxC,SACE,MAAC,SAAD;AAAW,IAAA,WAAW,EAAED,IAAxB;AAA8B,IAAA,aAAa,EAAEC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,MAAM,EAAER,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AASA,MAAMS,aAAN,SAA4BhB,SAA5B,CAAsC;AACpCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEZ,MAAAA,MAAM,EAAE,KAAKW,KAAL,CAAWX;AAArB,KAAb,CAFiB,CAE2B;AAC7C;;AAEDa,EAAAA,QAAQ,GAAG;AACT,UAAMC,QAAQ,GAAG;AACfX,MAAAA,EAAE,EAAE,KAAKS,KAAL,CAAWZ,MAAX,CAAkBe,MAAlB,GAA2B,CADhB;AAEfX,MAAAA,GAAG,EAAEY,gBAAgB,CAAC,CAAC,IAAF,EAAQ,CAAC,IAAT,EAAe,CAAf,CAFN;AAGfX,MAAAA,GAAG,EAAEW,gBAAgB,CAAC,KAAD,EAAQ,KAAR,EAAe,CAAf;AAHN,KAAjB;AAKA,SAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BlB,MAAAA,MAAM,EAAE,CAAC,GAAGkB,SAAS,CAAClB,MAAd,EAAsBc,QAAtB;AADkB,KAAL,CAAvB;AAIA;;;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWH,MADrB;AAEE,MAAA,IAAI,EAAE,KAAKG,KAAL,CAAWJ,IAFnB;AAGE,MAAA,MAAM,EAAE,KAAKK,KAAL,CAAWZ,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AA7BmC;;AAgCtC,eAAeS,aAAf","sourcesContent":["/*global google*/\r\nimport React, { Component } from \"react\";\r\nimport { Polyline } from \"react-google-maps\";\r\nimport {\r\n  withGoogleMap,\r\n  withScriptjs,\r\n  GoogleMap,\r\n  DirectionsRenderer,\r\n} from \"react-google-maps\";\r\n\r\nconst Markers = ({ places }) => {\r\n  return places.map((place) => {\r\n    return (\r\n      <Marker key={place.id} position={{ lat: place.lat, lng: place.lng }} />\r\n    );\r\n  });\r\n};\r\n\r\nconst Map = ({ places, zoom, center }) => {\r\n  return (\r\n    <GoogleMap defaultZoom={zoom} defaultCenter={center}>\r\n      <Markers places={places} />\r\n    </GoogleMap>\r\n  );\r\n};\r\n\r\n\r\nclass MapWithMarker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { places: this.props.places }; //initialize initial state from props\r\n  }\r\n\r\n  addPlace() {\r\n    const newPlace = {\r\n      id: this.state.places.length + 1,\r\n      lat: getRandomInRange(-30.0, -35.0, 3),\r\n      lng: getRandomInRange(110.0, 150.0, 3)\r\n    };\r\n    this.setState(prevState => ({\r\n      places: [...prevState.places, newPlace]\r\n    }));\r\n\r\n    /*if(this.state.places.length > 10) { \r\n      clearInterval(this.intervalId)\r\n    }*/\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Map\r\n        center={this.props.center}\r\n        zoom={this.props.zoom}\r\n        places={this.state.places}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapWithMarker;\r\n"]},"metadata":{},"sourceType":"module"}